import edu.javacourse.register.domain.MarriageCertificate;
import edu.javacourse.register.domain.Passport;
import edu.javacourse.register.domain.PersonFemale;
import edu.javacourse.register.domain.PersonMale;
import edu.javacourse.register.view.MarriageRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Component;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.util.ArrayList;

@Component
public class MarriageDao {
private static final Logger LOGGER = LoggerFactory.getLogger(MarriageDao.class);
    private EntityManager entityManager;

    @Value("${test.value}")
    private String test;

    public void setTest(String test) {
        this.test = test;
    }

    public MarriageDao() {
        EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("persistence");
        this.entityManager = entityManagerFactory.createEntityManager();
    }

    public MarriageCertificate findMarriageCertificate(MarriageRequest request){
        LOGGER.info("findMarriageCertificate called:{}", test);
//        PersonMale husband = getHusband(request);
//        PersonFemale wife = getWife(request);
//        entityManager.getTransaction().begin();
//        entityManager.merge(husband);
//        entityManager.merge(wife);
//        entityManager.getTransaction().commit();
//
//        Query namedQuery = entityManager.createNamedQuery("MarriageCertificate.findMarriageCertificate");
//        namedQuery.setParameter("husband", husband);
//        namedQuery.setParameter("wife", wife);
//        List<MarriageCertificate> mc = namedQuery.getResultList();
//        return mc.size()!=0? mc.get(0):null;
        return null;
    }

    /**
     *     private Long marriageCertificateId;
     *     private String number;
     *     private LocalDate issueDate;
     *     private PersonMale husband;
     *     private PersonFemale wife;
     *     private boolean active;
     *     private LocalDate endDate;
     */

    private PersonMale getHusband(MarriageRequest request) {
        var husband = new PersonMale();
        husband.setPersonId(2l);
        husband.setFirstName(request.getHusbandGivenName());
        husband.setLastName(request.getHusbandSurname());
        husband.setPatronymic(request.getHusbandPatronymic());
        husband.setDateOfBirth(request.getHusbandDateBirth());

        var husbandPassport = new Passport();
        husbandPassport.setPassportId(2l);
        husbandPassport.setSerial(request.getHusbandPassportSerial());
        husbandPassport.setNumber(request.getHusbandPassportNumber());
        husbandPassport.setPerson(husband);
        husbandPassport.setIssueDate(request.getHusbandPassportIssueDate());
        husbandPassport.setIssueDepartment("Department Passport 2");
        var passportsHusband = new ArrayList<Passport>();
        passportsHusband.add(husbandPassport);
        husband.setPassports(passportsHusband);
        return husband;
    }

    private PersonFemale getWife(MarriageRequest request) {
        var wife = new PersonFemale();
        wife.setPersonId(1l);
        wife.setFirstName(request.getWifeGivenName());
        wife.setLastName(request.getWifeSurname());
        wife.setPatronymic(request.getWifePatronymic());
        wife.setDateOfBirth(request.getWifeDateBirth());
        var wifePassport = new Passport();
        wifePassport.setPassportId(1l);
        wifePassport.setSerial(request.getWifePassportSerial());
        wifePassport.setNumber(request.getWifePassportNumber());
        wifePassport.setPerson(wife);
        wifePassport.setIssueDate(request.getWifePassportIssueDate());
        wifePassport.setIssueDepartment("Department Passport");
        var passportsWife = new ArrayList<Passport>();
        passportsWife.add(wifePassport);
        wife.setPassports(passportsWife);
        return wife;
    }


    <?xml version="1.0" encoding="UTF-8" ?>
    <web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="3.0"
             xmlns="http://java.sun.com/xml/ns/javaee"
             xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
             http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
        <listener>
            <listener-class>
                org.springframework.web.context.ContextLoaderListener
            </listener-class>
        </listener>
        <context-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/classes/springContext.xml</param-value>
        </context-param>

        <servlet>
            <servlet-name>JerseyServlet</servlet-name>
            <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
            <init-param>
                <param-name>jersey.config.server.provider.packages</param-name><!--Look packages search rest Service-->
                <param-value>edu.javacourse.register</param-value>
            </init-param>
            <init-param>
                <param-name>jersey.config.server.provider.scanning.recursive</param-name>
                <param-value>true</param-value>
            </init-param>
            <init-param>
                <param-name>jersey.config.server.provider.classnames</param-name> <!--register Json-->
                <param-value>org.glassfish.jersey.jackson.JacksonFeature</param-value>
            </init-param>
        </servlet>
        <servlet-mapping>
            <servlet-name>JerseyServlet</servlet-name>
            <url-pattern>/rest/*</url-pattern>
        </servlet-mapping>
    </web-app>


    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:context="http://www.springframework.org/schema/context"
           xmlns:tx="http://www.springframework.org/schema/tx"
           xmlns:jpa="http://www.springframework.org/schema/data/jpa"
           xsi:schemaLocation="http://www.springframework.org/schema/beans
           https://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context
           https://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
           http://www.springframework.org/schema/data/jpa
           http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
           <!--серые добавлены для применения аннотаций-->

           <context:component-scan base-package="edu.javacourse.register"/><!--указываем пакет ниже которого будут сканироваться аннотации-->

           <tx:annotation-driven transaction-manager="txManager" /><!--говорим TransactionManager с помощью аннотаций а где ему нужно вклиниваться Иньекция кода-->

           <jpa:repositories base-package="edu.javacourse.register"
                             entity-manager-factory-ref="emf"
                             transaction-manager-ref="txManager"/>


           <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"><!--подключение к БД через стандартный драйвер и класс DMDS реализующий интерфейс DataSource-->
                  <property name="driverClassName" value="org.postgresql.Driver"/>
                  <property name="url" value="jdbc:postgresql://localhost:5432/register_office"/>
                  <property name="username" value="postgres"/>
                  <property name="password" value="2134"/>
           </bean>

           <bean name="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
                  <property name="dataSource" ref="dataSource"/>
                  <property name="packagesToScan"> <!--определяем пакет в котором у нас прячутся все наши Entity-->
                         <list>
                                <value>edu.javacourse.register.domain</value>
                         </list>
                  </property>
                  <property name="jpaVendorAdapter"> <!--к какому ORM мы собираемся подключаться к JPA через Hibernate в нашем случае -->
                         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
                  </property>
                  <property name="jpaProperties">
                         <props>
                                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL10Dialect</prop>
                                <prop key="hibernate.show_sql">true</prop>
                         </props>
                  </property>
           </bean>

           <bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
                  <property name="entityManagerFactory" ref="emf"/>
           </bean>


